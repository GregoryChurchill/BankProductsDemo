/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductV4
    /// </summary>
    [DataContract]
        public partial class BankingProductV4 :  IEquatable<BankingProductV4>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductV4" /> class.
        /// </summary>
        /// <param name="productId">A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines. (required).</param>
        /// <param name="effectiveFrom">The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate.</param>
        /// <param name="effectiveTo">The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products.</param>
        /// <param name="lastUpdated">The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered) (required).</param>
        /// <param name="productCategory">productCategory (required).</param>
        /// <param name="name">The display name of the product (required).</param>
        /// <param name="description">A description of the product (required).</param>
        /// <param name="brand">A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required (required).</param>
        /// <param name="brandName">An optional display name of the brand.</param>
        /// <param name="applicationUri">A link to an application web page where this product can be applied for..</param>
        /// <param name="isTailored">Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable (required).</param>
        /// <param name="additionalInformation">additionalInformation.</param>
        /// <param name="cardArt">An array of card art images.</param>
        public BankingProductV4(string productId = default(string), string effectiveFrom = default(string), string effectiveTo = default(string), string lastUpdated = default(string), BankingProductCategory productCategory = default(BankingProductCategory), string name = default(string), string description = default(string), string brand = default(string), string brandName = default(string), string applicationUri = default(string), bool? isTailored = default(bool?), BankingProductAdditionalInformationV2 additionalInformation = default(BankingProductAdditionalInformationV2), List<BankingProductV4CardArt> cardArt = default(List<BankingProductV4CardArt>))
        {
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new InvalidDataException("productId is a required property for BankingProductV4 and cannot be null");
            }
            else
            {
                this.ProductId = productId;
            }
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new InvalidDataException("lastUpdated is a required property for BankingProductV4 and cannot be null");
            }
            else
            {
                this.LastUpdated = lastUpdated;
            }
            // to ensure "productCategory" is required (not null)
            if (productCategory == null)
            {
                throw new InvalidDataException("productCategory is a required property for BankingProductV4 and cannot be null");
            }
            else
            {
                this.ProductCategory = productCategory;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BankingProductV4 and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for BankingProductV4 and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "brand" is required (not null)
            if (brand == null)
            {
                throw new InvalidDataException("brand is a required property for BankingProductV4 and cannot be null");
            }
            else
            {
                this.Brand = brand;
            }
            // to ensure "isTailored" is required (not null)
            if (isTailored == null)
            {
                throw new InvalidDataException("isTailored is a required property for BankingProductV4 and cannot be null");
            }
            else
            {
                this.IsTailored = isTailored;
            }
            this.EffectiveFrom = effectiveFrom;
            this.EffectiveTo = effectiveTo;
            this.BrandName = brandName;
            this.ApplicationUri = applicationUri;
            this.AdditionalInformation = additionalInformation;
            this.CardArt = cardArt;
        }
        
        /// <summary>
        /// A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.
        /// </summary>
        /// <value>A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate
        /// </summary>
        /// <value>The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate</value>
        [DataMember(Name="effectiveFrom", EmitDefaultValue=false)]
        public string EffectiveFrom { get; set; }

        /// <summary>
        /// The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products
        /// </summary>
        /// <value>The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products</value>
        [DataMember(Name="effectiveTo", EmitDefaultValue=false)]
        public string EffectiveTo { get; set; }

        /// <summary>
        /// The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
        /// </summary>
        /// <value>The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategory
        /// </summary>
        [DataMember(Name="productCategory", EmitDefaultValue=false)]
        public BankingProductCategory ProductCategory { get; set; }

        /// <summary>
        /// The display name of the product
        /// </summary>
        /// <value>The display name of the product</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the product
        /// </summary>
        /// <value>A description of the product</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required
        /// </summary>
        /// <value>A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required</value>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// An optional display name of the brand
        /// </summary>
        /// <value>An optional display name of the brand</value>
        [DataMember(Name="brandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }

        /// <summary>
        /// A link to an application web page where this product can be applied for.
        /// </summary>
        /// <value>A link to an application web page where this product can be applied for.</value>
        [DataMember(Name="applicationUri", EmitDefaultValue=false)]
        public string ApplicationUri { get; set; }

        /// <summary>
        /// Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
        /// </summary>
        /// <value>Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable</value>
        [DataMember(Name="isTailored", EmitDefaultValue=false)]
        public bool? IsTailored { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public BankingProductAdditionalInformationV2 AdditionalInformation { get; set; }

        /// <summary>
        /// An array of card art images
        /// </summary>
        /// <value>An array of card art images</value>
        [DataMember(Name="cardArt", EmitDefaultValue=false)]
        public List<BankingProductV4CardArt> CardArt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductV4 {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveTo: ").Append(EffectiveTo).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  ApplicationUri: ").Append(ApplicationUri).Append("\n");
            sb.Append("  IsTailored: ").Append(IsTailored).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  CardArt: ").Append(CardArt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductV4);
        }

        /// <summary>
        /// Returns true if BankingProductV4 instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductV4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductV4 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.EffectiveTo == input.EffectiveTo ||
                    (this.EffectiveTo != null &&
                    this.EffectiveTo.Equals(input.EffectiveTo))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.ProductCategory == input.ProductCategory ||
                    (this.ProductCategory != null &&
                    this.ProductCategory.Equals(input.ProductCategory))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.ApplicationUri == input.ApplicationUri ||
                    (this.ApplicationUri != null &&
                    this.ApplicationUri.Equals(input.ApplicationUri))
                ) && 
                (
                    this.IsTailored == input.IsTailored ||
                    (this.IsTailored != null &&
                    this.IsTailored.Equals(input.IsTailored))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                ) && 
                (
                    this.CardArt == input.CardArt ||
                    this.CardArt != null &&
                    input.CardArt != null &&
                    this.CardArt.SequenceEqual(input.CardArt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                if (this.EffectiveTo != null)
                    hashCode = hashCode * 59 + this.EffectiveTo.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.ProductCategory != null)
                    hashCode = hashCode * 59 + this.ProductCategory.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.BrandName != null)
                    hashCode = hashCode * 59 + this.BrandName.GetHashCode();
                if (this.ApplicationUri != null)
                    hashCode = hashCode * 59 + this.ApplicationUri.GetHashCode();
                if (this.IsTailored != null)
                    hashCode = hashCode * 59 + this.IsTailored.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                if (this.CardArt != null)
                    hashCode = hashCode * 59 + this.CardArt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
