/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductFee
    /// </summary>
    [DataContract]
        public partial class BankingProductFee :  IEquatable<BankingProductFee>, IValidatableObject
    {
        /// <summary>
        /// The type of fee
        /// </summary>
        /// <value>The type of fee</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FeeTypeEnum
        {
            /// <summary>
            /// Enum DEPOSIT for value: DEPOSIT
            /// </summary>
            [EnumMember(Value = "DEPOSIT")]
            DEPOSIT = 1,
            /// <summary>
            /// Enum EVENT for value: EVENT
            /// </summary>
            [EnumMember(Value = "EVENT")]
            EVENT = 2,
            /// <summary>
            /// Enum EXIT for value: EXIT
            /// </summary>
            [EnumMember(Value = "EXIT")]
            EXIT = 3,
            /// <summary>
            /// Enum PAYMENT for value: PAYMENT
            /// </summary>
            [EnumMember(Value = "PAYMENT")]
            PAYMENT = 4,
            /// <summary>
            /// Enum PERIODIC for value: PERIODIC
            /// </summary>
            [EnumMember(Value = "PERIODIC")]
            PERIODIC = 5,
            /// <summary>
            /// Enum PURCHASE for value: PURCHASE
            /// </summary>
            [EnumMember(Value = "PURCHASE")]
            PURCHASE = 6,
            /// <summary>
            /// Enum TRANSACTION for value: TRANSACTION
            /// </summary>
            [EnumMember(Value = "TRANSACTION")]
            TRANSACTION = 7,
            /// <summary>
            /// Enum UPFRONT for value: UPFRONT
            /// </summary>
            [EnumMember(Value = "UPFRONT")]
            UPFRONT = 8,
            /// <summary>
            /// Enum VARIABLE for value: VARIABLE
            /// </summary>
            [EnumMember(Value = "VARIABLE")]
            VARIABLE = 9,
            /// <summary>
            /// Enum WITHDRAWAL for value: WITHDRAWAL
            /// </summary>
            [EnumMember(Value = "WITHDRAWAL")]
            WITHDRAWAL = 10        }
        /// <summary>
        /// The type of fee
        /// </summary>
        /// <value>The type of fee</value>
        [DataMember(Name="feeType", EmitDefaultValue=false)]
        public FeeTypeEnum? FeeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductFee" /> class.
        /// </summary>
        /// <param name="name">Name of the fee (required).</param>
        /// <param name="feeType">The type of fee (required).</param>
        /// <param name="amount">The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied.</param>
        /// <param name="balanceRate">A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied..</param>
        /// <param name="transactionRate">A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied.</param>
        /// <param name="accruedRate">A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied.</param>
        /// <param name="accrualFrequency">The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax).</param>
        /// <param name="currency">The currency the fee will be charged in. Assumes AUD if absent.</param>
        /// <param name="additionalValue">Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc).</param>
        /// <param name="additionalInfo">Display text providing more information on the fee.</param>
        /// <param name="additionalInfoUri">Link to a web page with more information on this fee.</param>
        /// <param name="discounts">An optional list of discounts to this fee that may be available.</param>
        public BankingProductFee(string name = default(string), FeeTypeEnum? feeType = default(FeeTypeEnum?), string amount = default(string), string balanceRate = default(string), string transactionRate = default(string), string accruedRate = default(string), string accrualFrequency = default(string), string currency = default(string), string additionalValue = default(string), string additionalInfo = default(string), string additionalInfoUri = default(string), List<BankingProductDiscount> discounts = default(List<BankingProductDiscount>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BankingProductFee and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "feeType" is required (not null)
            //if (feeType == null)
            //{
            //    throw new InvalidDataException("feeType is a required property for BankingProductFee and cannot be null");
            //}
            //else
            //{
                this.FeeType = feeType;
            //}
            this.Amount = amount;
            this.BalanceRate = balanceRate;
            this.TransactionRate = transactionRate;
            this.AccruedRate = accruedRate;
            this.AccrualFrequency = accrualFrequency;
            this.Currency = currency;
            this.AdditionalValue = additionalValue;
            this.AdditionalInfo = additionalInfo;
            this.AdditionalInfoUri = additionalInfoUri;
            this.Discounts = discounts;
        }
        
        /// <summary>
        /// Name of the fee
        /// </summary>
        /// <value>Name of the fee</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied
        /// </summary>
        /// <value>The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied.
        /// </summary>
        /// <value>A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied.</value>
        [DataMember(Name="balanceRate", EmitDefaultValue=false)]
        public string BalanceRate { get; set; }

        /// <summary>
        /// A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied
        /// </summary>
        /// <value>A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied</value>
        [DataMember(Name="transactionRate", EmitDefaultValue=false)]
        public string TransactionRate { get; set; }

        /// <summary>
        /// A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied
        /// </summary>
        /// <value>A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the *feeType* \&quot;VARIABLE\&quot; is supplied</value>
        [DataMember(Name="accruedRate", EmitDefaultValue=false)]
        public string AccruedRate { get; set; }

        /// <summary>
        /// The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name="accrualFrequency", EmitDefaultValue=false)]
        public string AccrualFrequency { get; set; }

        /// <summary>
        /// The currency the fee will be charged in. Assumes AUD if absent
        /// </summary>
        /// <value>The currency the fee will be charged in. Assumes AUD if absent</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)
        /// </summary>
        /// <value>Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)</value>
        [DataMember(Name="additionalValue", EmitDefaultValue=false)]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information on the fee
        /// </summary>
        /// <value>Display text providing more information on the fee</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information on this fee
        /// </summary>
        /// <value>Link to a web page with more information on this fee</value>
        [DataMember(Name="additionalInfoUri", EmitDefaultValue=false)]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// An optional list of discounts to this fee that may be available
        /// </summary>
        /// <value>An optional list of discounts to this fee that may be available</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<BankingProductDiscount> Discounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductFee {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceRate: ").Append(BalanceRate).Append("\n");
            sb.Append("  TransactionRate: ").Append(TransactionRate).Append("\n");
            sb.Append("  AccruedRate: ").Append(AccruedRate).Append("\n");
            sb.Append("  AccrualFrequency: ").Append(AccrualFrequency).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductFee);
        }

        /// <summary>
        /// Returns true if BankingProductFee instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductFee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductFee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceRate == input.BalanceRate ||
                    (this.BalanceRate != null &&
                    this.BalanceRate.Equals(input.BalanceRate))
                ) && 
                (
                    this.TransactionRate == input.TransactionRate ||
                    (this.TransactionRate != null &&
                    this.TransactionRate.Equals(input.TransactionRate))
                ) && 
                (
                    this.AccruedRate == input.AccruedRate ||
                    (this.AccruedRate != null &&
                    this.AccruedRate.Equals(input.AccruedRate))
                ) && 
                (
                    this.AccrualFrequency == input.AccrualFrequency ||
                    (this.AccrualFrequency != null &&
                    this.AccrualFrequency.Equals(input.AccrualFrequency))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.AdditionalValue == input.AdditionalValue ||
                    (this.AdditionalValue != null &&
                    this.AdditionalValue.Equals(input.AdditionalValue))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.AdditionalInfoUri == input.AdditionalInfoUri ||
                    (this.AdditionalInfoUri != null &&
                    this.AdditionalInfoUri.Equals(input.AdditionalInfoUri))
                ) && 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    input.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BalanceRate != null)
                    hashCode = hashCode * 59 + this.BalanceRate.GetHashCode();
                if (this.TransactionRate != null)
                    hashCode = hashCode * 59 + this.TransactionRate.GetHashCode();
                if (this.AccruedRate != null)
                    hashCode = hashCode * 59 + this.AccruedRate.GetHashCode();
                if (this.AccrualFrequency != null)
                    hashCode = hashCode * 59 + this.AccrualFrequency.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.AdditionalValue != null)
                    hashCode = hashCode * 59 + this.AdditionalValue.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + this.AdditionalInfoUri.GetHashCode();
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
