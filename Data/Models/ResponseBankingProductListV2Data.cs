/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankingProductsData.Models
{
    /// <summary>
    /// ResponseBankingProductListV2Data
    /// </summary>
    [DataContract]
        public partial class ResponseBankingProductListV2Data :  IEquatable<ResponseBankingProductListV2Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseBankingProductListV2Data" /> class.
        /// </summary>
        /// <param name="products">The list of products returned.  If the filter results in an empty set then this array may have no records (required).</param>
        public ResponseBankingProductListV2Data(List<BankingProductV4> products = default(List<BankingProductV4>))
        {
            // to ensure "products" is required (not null)
            if (products == null)
            {
                // Greg
                //throw new InvalidDataException("products is a required property for ResponseBankingProductListV2Data and cannot be null");
            }
            else
            {
                this.Products = products;
            }
        }
        
        /// <summary>
        /// The list of products returned.  If the filter results in an empty set then this array may have no records
        /// </summary>
        /// <value>The list of products returned.  If the filter results in an empty set then this array may have no records</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<BankingProductV4> Products { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseBankingProductListV2Data {\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseBankingProductListV2Data);
        }

        /// <summary>
        /// Returns true if ResponseBankingProductListV2Data instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseBankingProductListV2Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseBankingProductListV2Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
