/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductFeatureV2
    /// </summary>
    [DataContract]
        public partial class BankingProductFeatureV2 :  IEquatable<BankingProductFeatureV2>, IValidatableObject
    {
        /// <summary>
        /// The type of feature described
        /// </summary>
        /// <value>The type of feature described</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FeatureTypeEnum
        {
            /// <summary>
            /// Enum ADDITIONALCARDS for value: ADDITIONAL_CARDS
            /// </summary>
            [EnumMember(Value = "ADDITIONAL_CARDS")]
            ADDITIONALCARDS = 1,
            /// <summary>
            /// Enum BALANCETRANSFERS for value: BALANCE_TRANSFERS
            /// </summary>
            [EnumMember(Value = "BALANCE_TRANSFERS")]
            BALANCETRANSFERS = 2,
            /// <summary>
            /// Enum BILLPAYMENT for value: BILL_PAYMENT
            /// </summary>
            [EnumMember(Value = "BILL_PAYMENT")]
            BILLPAYMENT = 3,
            /// <summary>
            /// Enum BONUSREWARDS for value: BONUS_REWARDS
            /// </summary>
            [EnumMember(Value = "BONUS_REWARDS")]
            BONUSREWARDS = 4,
            /// <summary>
            /// Enum CARDACCESS for value: CARD_ACCESS
            /// </summary>
            [EnumMember(Value = "CARD_ACCESS")]
            CARDACCESS = 5,
            /// <summary>
            /// Enum CASHBACKOFFER for value: CASHBACK_OFFER
            /// </summary>
            [EnumMember(Value = "CASHBACK_OFFER")]
            CASHBACKOFFER = 6,
            /// <summary>
            /// Enum COMPLEMENTARYPRODUCTDISCOUNTS for value: COMPLEMENTARY_PRODUCT_DISCOUNTS
            /// </summary>
            [EnumMember(Value = "COMPLEMENTARY_PRODUCT_DISCOUNTS")]
            COMPLEMENTARYPRODUCTDISCOUNTS = 7,
            /// <summary>
            /// Enum DIGITALBANKING for value: DIGITAL_BANKING
            /// </summary>
            [EnumMember(Value = "DIGITAL_BANKING")]
            DIGITALBANKING = 8,
            /// <summary>
            /// Enum DIGITALWALLET for value: DIGITAL_WALLET
            /// </summary>
            [EnumMember(Value = "DIGITAL_WALLET")]
            DIGITALWALLET = 9,
            /// <summary>
            /// Enum DONATEINTEREST for value: DONATE_INTEREST
            /// </summary>
            [EnumMember(Value = "DONATE_INTEREST")]
            DONATEINTEREST = 10,
            /// <summary>
            /// Enum EXTRAREPAYMENTS for value: EXTRA_REPAYMENTS
            /// </summary>
            [EnumMember(Value = "EXTRA_REPAYMENTS")]
            EXTRAREPAYMENTS = 11,
            /// <summary>
            /// Enum FRAUDPROTECTION for value: FRAUD_PROTECTION
            /// </summary>
            [EnumMember(Value = "FRAUD_PROTECTION")]
            FRAUDPROTECTION = 12,
            /// <summary>
            /// Enum FREETXNS for value: FREE_TXNS
            /// </summary>
            [EnumMember(Value = "FREE_TXNS")]
            FREETXNS = 13,
            /// <summary>
            /// Enum FREETXNSALLOWANCE for value: FREE_TXNS_ALLOWANCE
            /// </summary>
            [EnumMember(Value = "FREE_TXNS_ALLOWANCE")]
            FREETXNSALLOWANCE = 14,
            /// <summary>
            /// Enum GUARANTOR for value: GUARANTOR
            /// </summary>
            [EnumMember(Value = "GUARANTOR")]
            GUARANTOR = 15,
            /// <summary>
            /// Enum INSURANCE for value: INSURANCE
            /// </summary>
            [EnumMember(Value = "INSURANCE")]
            INSURANCE = 16,
            /// <summary>
            /// Enum INSTALMENTPLAN for value: INSTALMENT_PLAN
            /// </summary>
            [EnumMember(Value = "INSTALMENT_PLAN")]
            INSTALMENTPLAN = 17,
            /// <summary>
            /// Enum INTERESTFREE for value: INTEREST_FREE
            /// </summary>
            [EnumMember(Value = "INTEREST_FREE")]
            INTERESTFREE = 18,
            /// <summary>
            /// Enum INTERESTFREETRANSFERS for value: INTEREST_FREE_TRANSFERS
            /// </summary>
            [EnumMember(Value = "INTEREST_FREE_TRANSFERS")]
            INTERESTFREETRANSFERS = 19,
            /// <summary>
            /// Enum LOYALTYPROGRAM for value: LOYALTY_PROGRAM
            /// </summary>
            [EnumMember(Value = "LOYALTY_PROGRAM")]
            LOYALTYPROGRAM = 20,
            /// <summary>
            /// Enum NOTIFICATIONS for value: NOTIFICATIONS
            /// </summary>
            [EnumMember(Value = "NOTIFICATIONS")]
            NOTIFICATIONS = 21,
            /// <summary>
            /// Enum NPPENABLED for value: NPP_ENABLED
            /// </summary>
            [EnumMember(Value = "NPP_ENABLED")]
            NPPENABLED = 22,
            /// <summary>
            /// Enum NPPPAYID for value: NPP_PAYID
            /// </summary>
            [EnumMember(Value = "NPP_PAYID")]
            NPPPAYID = 23,
            /// <summary>
            /// Enum OFFSET for value: OFFSET
            /// </summary>
            [EnumMember(Value = "OFFSET")]
            OFFSET = 24,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 25,
            /// <summary>
            /// Enum OVERDRAFT for value: OVERDRAFT
            /// </summary>
            [EnumMember(Value = "OVERDRAFT")]
            OVERDRAFT = 26,
            /// <summary>
            /// Enum REDRAW for value: REDRAW
            /// </summary>
            [EnumMember(Value = "REDRAW")]
            REDRAW = 27,
            /// <summary>
            /// Enum RELATIONSHIPMANAGEMENT for value: RELATIONSHIP_MANAGEMENT
            /// </summary>
            [EnumMember(Value = "RELATIONSHIP_MANAGEMENT")]
            RELATIONSHIPMANAGEMENT = 28,
            /// <summary>
            /// Enum UNLIMITEDTXNS for value: UNLIMITED_TXNS
            /// </summary>
            [EnumMember(Value = "UNLIMITED_TXNS")]
            UNLIMITEDTXNS = 29        }
        /// <summary>
        /// The type of feature described
        /// </summary>
        /// <value>The type of feature described</value>
        [DataMember(Name="featureType", EmitDefaultValue=false)]
        public FeatureTypeEnum FeatureType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductFeatureV2" /> class.
        /// </summary>
        /// <param name="featureType">The type of feature described (required).</param>
        /// <param name="additionalValue">Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc).</param>
        /// <param name="additionalInfo">Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER.</param>
        /// <param name="additionalInfoUri">Link to a web page with more information on this feature.</param>
        public BankingProductFeatureV2(FeatureTypeEnum featureType = default(FeatureTypeEnum), string additionalValue = default(string), string additionalInfo = default(string), string additionalInfoUri = default(string))
        {
            // to ensure "featureType" is required (not null)
            if (featureType == null)
            {
                throw new InvalidDataException("featureType is a required property for BankingProductFeatureV2 and cannot be null");
            }
            else
            {
                this.FeatureType = featureType;
            }
            this.AdditionalValue = additionalValue;
            this.AdditionalInfo = additionalInfo;
            this.AdditionalInfoUri = additionalInfoUri;
        }
        

        /// <summary>
        /// Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)
        /// </summary>
        /// <value>Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)</value>
        [DataMember(Name="additionalValue", EmitDefaultValue=false)]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER
        /// </summary>
        /// <value>Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information on this feature
        /// </summary>
        /// <value>Link to a web page with more information on this feature</value>
        [DataMember(Name="additionalInfoUri", EmitDefaultValue=false)]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductFeatureV2 {\n");
            sb.Append("  FeatureType: ").Append(FeatureType).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductFeatureV2);
        }

        /// <summary>
        /// Returns true if BankingProductFeatureV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductFeatureV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductFeatureV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeatureType == input.FeatureType ||
                    (this.FeatureType != null &&
                    this.FeatureType.Equals(input.FeatureType))
                ) && 
                (
                    this.AdditionalValue == input.AdditionalValue ||
                    (this.AdditionalValue != null &&
                    this.AdditionalValue.Equals(input.AdditionalValue))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.AdditionalInfoUri == input.AdditionalInfoUri ||
                    (this.AdditionalInfoUri != null &&
                    this.AdditionalInfoUri.Equals(input.AdditionalInfoUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeatureType != null)
                    hashCode = hashCode * 59 + this.FeatureType.GetHashCode();
                if (this.AdditionalValue != null)
                    hashCode = hashCode * 59 + this.AdditionalValue.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + this.AdditionalInfoUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
