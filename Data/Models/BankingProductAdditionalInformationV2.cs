/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankingProductsData.Models
{
    /// <summary>
    /// Object that contains links to additional information on specific topics
    /// </summary>
    [DataContract]
        public partial class BankingProductAdditionalInformationV2 :  IEquatable<BankingProductAdditionalInformationV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductAdditionalInformationV2" /> class.
        /// </summary>
        /// <param name="overviewUri">General overview of the product. Mandatory if &#x60;additionalOverviewUris&#x60; includes one or more supporting documents..</param>
        /// <param name="termsUri">Terms and conditions for the product. Mandatory if &#x60;additionalTermsUris&#x60; includes one or more supporting documents..</param>
        /// <param name="eligibilityUri">Eligibility rules and criteria for the product. Mandatory if &#x60;additionalEligibilityUris&#x60; includes one or more supporting documents..</param>
        /// <param name="feesAndPricingUri">Description of fees, pricing, discounts, exemptions and bonuses for the product. Mandatory if &#x60;additionalFeesAndPricingUris&#x60; includes one or more supporting documents..</param>
        /// <param name="bundleUri">Description of a bundle that this product can be part of. Mandatory if &#x60;additionalBundleUris&#x60; includes one or more supporting documents..</param>
        /// <param name="additionalOverviewUris">An array of additional general overviews for the product or features of the product, if applicable. To be treated as secondary documents to the &#x60;overviewUri&#x60;. Only to be used if there is a primary &#x60;overviewUri&#x60;..</param>
        /// <param name="additionalTermsUris">An array of additional terms and conditions for the product, if applicable. To be treated as secondary documents to the &#x60;termsUri&#x60;. Only to be used if there is a primary &#x60;termsUri&#x60;..</param>
        /// <param name="additionalEligibilityUris">An array of additional eligibility rules and criteria for the product, if applicable. To be treated as secondary documents to the &#x60;eligibilityUri&#x60;. Only to be used if there is a primary &#x60;eligibilityUri&#x60;..</param>
        /// <param name="additionalFeesAndPricingUris">An array of additional fees, pricing, discounts, exemptions and bonuses for the product, if applicable. To be treated as secondary documents to the &#x60;feesAndPricingUri&#x60;. Only to be used if there is a primary &#x60;feesAndPricingUri&#x60;..</param>
        /// <param name="additionalBundleUris">An array of additional bundles for the product, if applicable. To be treated as secondary documents to the &#x60;bundleUri&#x60;. Only to be used if there is a primary &#x60;bundleUri&#x60;..</param>
        public BankingProductAdditionalInformationV2(string overviewUri = default(string), string termsUri = default(string), string eligibilityUri = default(string), string feesAndPricingUri = default(string), string bundleUri = default(string), List<BankingProductAdditionalInformationV2AdditionalInformationUris> additionalOverviewUris = default(List<BankingProductAdditionalInformationV2AdditionalInformationUris>), List<BankingProductAdditionalInformationV2AdditionalInformationUris> additionalTermsUris = default(List<BankingProductAdditionalInformationV2AdditionalInformationUris>), List<BankingProductAdditionalInformationV2AdditionalInformationUris> additionalEligibilityUris = default(List<BankingProductAdditionalInformationV2AdditionalInformationUris>), List<BankingProductAdditionalInformationV2AdditionalInformationUris> additionalFeesAndPricingUris = default(List<BankingProductAdditionalInformationV2AdditionalInformationUris>), List<BankingProductAdditionalInformationV2AdditionalInformationUris> additionalBundleUris = default(List<BankingProductAdditionalInformationV2AdditionalInformationUris>))
        {
            this.OverviewUri = overviewUri;
            this.TermsUri = termsUri;
            this.EligibilityUri = eligibilityUri;
            this.FeesAndPricingUri = feesAndPricingUri;
            this.BundleUri = bundleUri;
            this.AdditionalOverviewUris = additionalOverviewUris;
            this.AdditionalTermsUris = additionalTermsUris;
            this.AdditionalEligibilityUris = additionalEligibilityUris;
            this.AdditionalFeesAndPricingUris = additionalFeesAndPricingUris;
            this.AdditionalBundleUris = additionalBundleUris;
        }
        
        /// <summary>
        /// General overview of the product. Mandatory if &#x60;additionalOverviewUris&#x60; includes one or more supporting documents.
        /// </summary>
        /// <value>General overview of the product. Mandatory if &#x60;additionalOverviewUris&#x60; includes one or more supporting documents.</value>
        [DataMember(Name="overviewUri", EmitDefaultValue=false)]
        public string OverviewUri { get; set; }

        /// <summary>
        /// Terms and conditions for the product. Mandatory if &#x60;additionalTermsUris&#x60; includes one or more supporting documents.
        /// </summary>
        /// <value>Terms and conditions for the product. Mandatory if &#x60;additionalTermsUris&#x60; includes one or more supporting documents.</value>
        [DataMember(Name="termsUri", EmitDefaultValue=false)]
        public string TermsUri { get; set; }

        /// <summary>
        /// Eligibility rules and criteria for the product. Mandatory if &#x60;additionalEligibilityUris&#x60; includes one or more supporting documents.
        /// </summary>
        /// <value>Eligibility rules and criteria for the product. Mandatory if &#x60;additionalEligibilityUris&#x60; includes one or more supporting documents.</value>
        [DataMember(Name="eligibilityUri", EmitDefaultValue=false)]
        public string EligibilityUri { get; set; }

        /// <summary>
        /// Description of fees, pricing, discounts, exemptions and bonuses for the product. Mandatory if &#x60;additionalFeesAndPricingUris&#x60; includes one or more supporting documents.
        /// </summary>
        /// <value>Description of fees, pricing, discounts, exemptions and bonuses for the product. Mandatory if &#x60;additionalFeesAndPricingUris&#x60; includes one or more supporting documents.</value>
        [DataMember(Name="feesAndPricingUri", EmitDefaultValue=false)]
        public string FeesAndPricingUri { get; set; }

        /// <summary>
        /// Description of a bundle that this product can be part of. Mandatory if &#x60;additionalBundleUris&#x60; includes one or more supporting documents.
        /// </summary>
        /// <value>Description of a bundle that this product can be part of. Mandatory if &#x60;additionalBundleUris&#x60; includes one or more supporting documents.</value>
        [DataMember(Name="bundleUri", EmitDefaultValue=false)]
        public string BundleUri { get; set; }

        /// <summary>
        /// An array of additional general overviews for the product or features of the product, if applicable. To be treated as secondary documents to the &#x60;overviewUri&#x60;. Only to be used if there is a primary &#x60;overviewUri&#x60;.
        /// </summary>
        /// <value>An array of additional general overviews for the product or features of the product, if applicable. To be treated as secondary documents to the &#x60;overviewUri&#x60;. Only to be used if there is a primary &#x60;overviewUri&#x60;.</value>
        [DataMember(Name="additionalOverviewUris", EmitDefaultValue=false)]
        public List<BankingProductAdditionalInformationV2AdditionalInformationUris> AdditionalOverviewUris { get; set; }

        /// <summary>
        /// An array of additional terms and conditions for the product, if applicable. To be treated as secondary documents to the &#x60;termsUri&#x60;. Only to be used if there is a primary &#x60;termsUri&#x60;.
        /// </summary>
        /// <value>An array of additional terms and conditions for the product, if applicable. To be treated as secondary documents to the &#x60;termsUri&#x60;. Only to be used if there is a primary &#x60;termsUri&#x60;.</value>
        [DataMember(Name="additionalTermsUris", EmitDefaultValue=false)]
        public List<BankingProductAdditionalInformationV2AdditionalInformationUris> AdditionalTermsUris { get; set; }

        /// <summary>
        /// An array of additional eligibility rules and criteria for the product, if applicable. To be treated as secondary documents to the &#x60;eligibilityUri&#x60;. Only to be used if there is a primary &#x60;eligibilityUri&#x60;.
        /// </summary>
        /// <value>An array of additional eligibility rules and criteria for the product, if applicable. To be treated as secondary documents to the &#x60;eligibilityUri&#x60;. Only to be used if there is a primary &#x60;eligibilityUri&#x60;.</value>
        [DataMember(Name="additionalEligibilityUris", EmitDefaultValue=false)]
        public List<BankingProductAdditionalInformationV2AdditionalInformationUris> AdditionalEligibilityUris { get; set; }

        /// <summary>
        /// An array of additional fees, pricing, discounts, exemptions and bonuses for the product, if applicable. To be treated as secondary documents to the &#x60;feesAndPricingUri&#x60;. Only to be used if there is a primary &#x60;feesAndPricingUri&#x60;.
        /// </summary>
        /// <value>An array of additional fees, pricing, discounts, exemptions and bonuses for the product, if applicable. To be treated as secondary documents to the &#x60;feesAndPricingUri&#x60;. Only to be used if there is a primary &#x60;feesAndPricingUri&#x60;.</value>
        [DataMember(Name="additionalFeesAndPricingUris", EmitDefaultValue=false)]
        public List<BankingProductAdditionalInformationV2AdditionalInformationUris> AdditionalFeesAndPricingUris { get; set; }

        /// <summary>
        /// An array of additional bundles for the product, if applicable. To be treated as secondary documents to the &#x60;bundleUri&#x60;. Only to be used if there is a primary &#x60;bundleUri&#x60;.
        /// </summary>
        /// <value>An array of additional bundles for the product, if applicable. To be treated as secondary documents to the &#x60;bundleUri&#x60;. Only to be used if there is a primary &#x60;bundleUri&#x60;.</value>
        [DataMember(Name="additionalBundleUris", EmitDefaultValue=false)]
        public List<BankingProductAdditionalInformationV2AdditionalInformationUris> AdditionalBundleUris { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductAdditionalInformationV2 {\n");
            sb.Append("  OverviewUri: ").Append(OverviewUri).Append("\n");
            sb.Append("  TermsUri: ").Append(TermsUri).Append("\n");
            sb.Append("  EligibilityUri: ").Append(EligibilityUri).Append("\n");
            sb.Append("  FeesAndPricingUri: ").Append(FeesAndPricingUri).Append("\n");
            sb.Append("  BundleUri: ").Append(BundleUri).Append("\n");
            sb.Append("  AdditionalOverviewUris: ").Append(AdditionalOverviewUris).Append("\n");
            sb.Append("  AdditionalTermsUris: ").Append(AdditionalTermsUris).Append("\n");
            sb.Append("  AdditionalEligibilityUris: ").Append(AdditionalEligibilityUris).Append("\n");
            sb.Append("  AdditionalFeesAndPricingUris: ").Append(AdditionalFeesAndPricingUris).Append("\n");
            sb.Append("  AdditionalBundleUris: ").Append(AdditionalBundleUris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductAdditionalInformationV2);
        }

        /// <summary>
        /// Returns true if BankingProductAdditionalInformationV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductAdditionalInformationV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductAdditionalInformationV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverviewUri == input.OverviewUri ||
                    (this.OverviewUri != null &&
                    this.OverviewUri.Equals(input.OverviewUri))
                ) && 
                (
                    this.TermsUri == input.TermsUri ||
                    (this.TermsUri != null &&
                    this.TermsUri.Equals(input.TermsUri))
                ) && 
                (
                    this.EligibilityUri == input.EligibilityUri ||
                    (this.EligibilityUri != null &&
                    this.EligibilityUri.Equals(input.EligibilityUri))
                ) && 
                (
                    this.FeesAndPricingUri == input.FeesAndPricingUri ||
                    (this.FeesAndPricingUri != null &&
                    this.FeesAndPricingUri.Equals(input.FeesAndPricingUri))
                ) && 
                (
                    this.BundleUri == input.BundleUri ||
                    (this.BundleUri != null &&
                    this.BundleUri.Equals(input.BundleUri))
                ) && 
                (
                    this.AdditionalOverviewUris == input.AdditionalOverviewUris ||
                    this.AdditionalOverviewUris != null &&
                    input.AdditionalOverviewUris != null &&
                    this.AdditionalOverviewUris.SequenceEqual(input.AdditionalOverviewUris)
                ) && 
                (
                    this.AdditionalTermsUris == input.AdditionalTermsUris ||
                    this.AdditionalTermsUris != null &&
                    input.AdditionalTermsUris != null &&
                    this.AdditionalTermsUris.SequenceEqual(input.AdditionalTermsUris)
                ) && 
                (
                    this.AdditionalEligibilityUris == input.AdditionalEligibilityUris ||
                    this.AdditionalEligibilityUris != null &&
                    input.AdditionalEligibilityUris != null &&
                    this.AdditionalEligibilityUris.SequenceEqual(input.AdditionalEligibilityUris)
                ) && 
                (
                    this.AdditionalFeesAndPricingUris == input.AdditionalFeesAndPricingUris ||
                    this.AdditionalFeesAndPricingUris != null &&
                    input.AdditionalFeesAndPricingUris != null &&
                    this.AdditionalFeesAndPricingUris.SequenceEqual(input.AdditionalFeesAndPricingUris)
                ) && 
                (
                    this.AdditionalBundleUris == input.AdditionalBundleUris ||
                    this.AdditionalBundleUris != null &&
                    input.AdditionalBundleUris != null &&
                    this.AdditionalBundleUris.SequenceEqual(input.AdditionalBundleUris)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OverviewUri != null)
                    hashCode = hashCode * 59 + this.OverviewUri.GetHashCode();
                if (this.TermsUri != null)
                    hashCode = hashCode * 59 + this.TermsUri.GetHashCode();
                if (this.EligibilityUri != null)
                    hashCode = hashCode * 59 + this.EligibilityUri.GetHashCode();
                if (this.FeesAndPricingUri != null)
                    hashCode = hashCode * 59 + this.FeesAndPricingUri.GetHashCode();
                if (this.BundleUri != null)
                    hashCode = hashCode * 59 + this.BundleUri.GetHashCode();
                if (this.AdditionalOverviewUris != null)
                    hashCode = hashCode * 59 + this.AdditionalOverviewUris.GetHashCode();
                if (this.AdditionalTermsUris != null)
                    hashCode = hashCode * 59 + this.AdditionalTermsUris.GetHashCode();
                if (this.AdditionalEligibilityUris != null)
                    hashCode = hashCode * 59 + this.AdditionalEligibilityUris.GetHashCode();
                if (this.AdditionalFeesAndPricingUris != null)
                    hashCode = hashCode * 59 + this.AdditionalFeesAndPricingUris.GetHashCode();
                if (this.AdditionalBundleUris != null)
                    hashCode = hashCode * 59 + this.AdditionalBundleUris.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
