/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductConstraint
    /// </summary>
    [DataContract]
        public partial class BankingProductConstraint :  IEquatable<BankingProductConstraint>, IValidatableObject
    {
        /// <summary>
        /// The type of constraint described.  See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of constraint described.  See the next section for an overview of valid values and their meaning</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ConstraintTypeEnum
        {
            /// <summary>
            /// Enum MAXBALANCE for value: MAX_BALANCE
            /// </summary>
            [EnumMember(Value = "MAX_BALANCE")]
            MAXBALANCE = 1,
            /// <summary>
            /// Enum MAXLIMIT for value: MAX_LIMIT
            /// </summary>
            [EnumMember(Value = "MAX_LIMIT")]
            MAXLIMIT = 2,
            /// <summary>
            /// Enum MINBALANCE for value: MIN_BALANCE
            /// </summary>
            [EnumMember(Value = "MIN_BALANCE")]
            MINBALANCE = 3,
            /// <summary>
            /// Enum MINLIMIT for value: MIN_LIMIT
            /// </summary>
            [EnumMember(Value = "MIN_LIMIT")]
            MINLIMIT = 4,
            /// <summary>
            /// Enum OPENINGBALANCE for value: OPENING_BALANCE
            /// </summary>
            [EnumMember(Value = "OPENING_BALANCE")]
            OPENINGBALANCE = 5        }
        /// <summary>
        /// The type of constraint described.  See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of constraint described.  See the next section for an overview of valid values and their meaning</value>
        [DataMember(Name="constraintType", EmitDefaultValue=false)]
        public ConstraintTypeEnum ConstraintType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductConstraint" /> class.
        /// </summary>
        /// <param name="constraintType">The type of constraint described.  See the next section for an overview of valid values and their meaning (required).</param>
        /// <param name="additionalValue">Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc).</param>
        /// <param name="additionalInfo">Display text providing more information the constraint.</param>
        /// <param name="additionalInfoUri">Link to a web page with more information on the constraint.</param>
        public BankingProductConstraint(ConstraintTypeEnum constraintType = default(ConstraintTypeEnum), string additionalValue = default(string), string additionalInfo = default(string), string additionalInfoUri = default(string))
        {
            // to ensure "constraintType" is required (not null)
            if (constraintType == null)
            {
                throw new InvalidDataException("constraintType is a required property for BankingProductConstraint and cannot be null");
            }
            else
            {
                this.ConstraintType = constraintType;
            }
            this.AdditionalValue = additionalValue;
            this.AdditionalInfo = additionalInfo;
            this.AdditionalInfoUri = additionalInfoUri;
        }
        

        /// <summary>
        /// Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc)
        /// </summary>
        /// <value>Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc)</value>
        [DataMember(Name="additionalValue", EmitDefaultValue=false)]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information the constraint
        /// </summary>
        /// <value>Display text providing more information the constraint</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information on the constraint
        /// </summary>
        /// <value>Link to a web page with more information on the constraint</value>
        [DataMember(Name="additionalInfoUri", EmitDefaultValue=false)]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductConstraint {\n");
            sb.Append("  ConstraintType: ").Append(ConstraintType).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductConstraint);
        }

        /// <summary>
        /// Returns true if BankingProductConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductConstraint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConstraintType == input.ConstraintType ||
                    (this.ConstraintType != null &&
                    this.ConstraintType.Equals(input.ConstraintType))
                ) && 
                (
                    this.AdditionalValue == input.AdditionalValue ||
                    (this.AdditionalValue != null &&
                    this.AdditionalValue.Equals(input.AdditionalValue))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.AdditionalInfoUri == input.AdditionalInfoUri ||
                    (this.AdditionalInfoUri != null &&
                    this.AdditionalInfoUri.Equals(input.AdditionalInfoUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConstraintType != null)
                    hashCode = hashCode * 59 + this.ConstraintType.GetHashCode();
                if (this.AdditionalValue != null)
                    hashCode = hashCode * 59 + this.AdditionalValue.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + this.AdditionalInfoUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
