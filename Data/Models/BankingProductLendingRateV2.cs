/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductLendingRateV2
    /// </summary>
    [DataContract]
        public partial class BankingProductLendingRateV2 :  IEquatable<BankingProductLendingRateV2>, IValidatableObject
    {
        /// <summary>
        /// The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LendingRateTypeEnum
        {
            /// <summary>
            /// Enum BUNDLEDISCOUNTFIXED for value: BUNDLE_DISCOUNT_FIXED
            /// </summary>
            [EnumMember(Value = "BUNDLE_DISCOUNT_FIXED")]
            BUNDLEDISCOUNTFIXED = 1,
            /// <summary>
            /// Enum BUNDLEDISCOUNTVARIABLE for value: BUNDLE_DISCOUNT_VARIABLE
            /// </summary>
            [EnumMember(Value = "BUNDLE_DISCOUNT_VARIABLE")]
            BUNDLEDISCOUNTVARIABLE = 2,
            /// <summary>
            /// Enum CASHADVANCE for value: CASH_ADVANCE
            /// </summary>
            [EnumMember(Value = "CASH_ADVANCE")]
            CASHADVANCE = 3,
            /// <summary>
            /// Enum DISCOUNT for value: DISCOUNT
            /// </summary>
            [EnumMember(Value = "DISCOUNT")]
            DISCOUNT = 4,
            /// <summary>
            /// Enum FIXED for value: FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED = 5,
            /// <summary>
            /// Enum FLOATING for value: FLOATING
            /// </summary>
            [EnumMember(Value = "FLOATING")]
            FLOATING = 6,
            /// <summary>
            /// Enum INTRODUCTORY for value: INTRODUCTORY
            /// </summary>
            [EnumMember(Value = "INTRODUCTORY")]
            INTRODUCTORY = 7,
            /// <summary>
            /// Enum MARKETLINKED for value: MARKET_LINKED
            /// </summary>
            [EnumMember(Value = "MARKET_LINKED")]
            MARKETLINKED = 8,
            /// <summary>
            /// Enum PENALTY for value: PENALTY
            /// </summary>
            [EnumMember(Value = "PENALTY")]
            PENALTY = 9,
            /// <summary>
            /// Enum PURCHASE for value: PURCHASE
            /// </summary>
            [EnumMember(Value = "PURCHASE")]
            PURCHASE = 10,
            /// <summary>
            /// Enum VARIABLE for value: VARIABLE
            /// </summary>
            [EnumMember(Value = "VARIABLE")]
            VARIABLE = 11        }
        /// <summary>
        /// The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning</value>
        [DataMember(Name="lendingRateType", EmitDefaultValue=false)]
        public LendingRateTypeEnum LendingRateType { get; set; }
        /// <summary>
        /// When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered
        /// </summary>
        /// <value>When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InterestPaymentDueEnum
        {
            /// <summary>
            /// Enum ADVANCE for value: IN_ADVANCE
            /// </summary>
            [EnumMember(Value = "IN_ADVANCE")]
            ADVANCE = 1,
            /// <summary>
            /// Enum ARREARS for value: IN_ARREARS
            /// </summary>
            [EnumMember(Value = "IN_ARREARS")]
            ARREARS = 2        }
        /// <summary>
        /// When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered
        /// </summary>
        /// <value>When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered</value>
        [DataMember(Name="interestPaymentDue", EmitDefaultValue=false)]
        public InterestPaymentDueEnum? InterestPaymentDue { get; set; }
        /// <summary>
        /// Options in place for repayments. If absent, the lending rate is applicable to all repayment types
        /// </summary>
        /// <value>Options in place for repayments. If absent, the lending rate is applicable to all repayment types</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RepaymentTypeEnum
        {
            /// <summary>
            /// Enum INTERESTONLY for value: INTEREST_ONLY
            /// </summary>
            [EnumMember(Value = "INTEREST_ONLY")]
            INTERESTONLY = 1,
            /// <summary>
            /// Enum PRINCIPALANDINTEREST for value: PRINCIPAL_AND_INTEREST
            /// </summary>
            [EnumMember(Value = "PRINCIPAL_AND_INTEREST")]
            PRINCIPALANDINTEREST = 2        }
        /// <summary>
        /// Options in place for repayments. If absent, the lending rate is applicable to all repayment types
        /// </summary>
        /// <value>Options in place for repayments. If absent, the lending rate is applicable to all repayment types</value>
        [DataMember(Name="repaymentType", EmitDefaultValue=false)]
        public RepaymentTypeEnum? RepaymentType { get; set; }
        /// <summary>
        /// The reason for taking out the loan. If absent, the lending rate is applicable to all loan purposes
        /// </summary>
        /// <value>The reason for taking out the loan. If absent, the lending rate is applicable to all loan purposes</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LoanPurposeEnum
        {
            /// <summary>
            /// Enum INVESTMENT for value: INVESTMENT
            /// </summary>
            [EnumMember(Value = "INVESTMENT")]
            INVESTMENT = 1,
            /// <summary>
            /// Enum OWNEROCCUPIED for value: OWNER_OCCUPIED
            /// </summary>
            [EnumMember(Value = "OWNER_OCCUPIED")]
            OWNEROCCUPIED = 2        }
        /// <summary>
        /// The reason for taking out the loan. If absent, the lending rate is applicable to all loan purposes
        /// </summary>
        /// <value>The reason for taking out the loan. If absent, the lending rate is applicable to all loan purposes</value>
        [DataMember(Name="loanPurpose", EmitDefaultValue=false)]
        public LoanPurposeEnum? LoanPurpose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductLendingRateV2" /> class.
        /// </summary>
        /// <param name="lendingRateType">The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning (required).</param>
        /// <param name="rate">The rate to be applied (required).</param>
        /// <param name="comparisonRate">A comparison rate equivalent for this rate.</param>
        /// <param name="calculationFrequency">The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#x27;applied&#x27; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax).</param>
        /// <param name="applicationFrequency">The period after which the calculated amount(s) (see calculationFrequency) are &#x27;applied&#x27; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax).</param>
        /// <param name="interestPaymentDue">When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered.</param>
        /// <param name="repaymentType">Options in place for repayments. If absent, the lending rate is applicable to all repayment types.</param>
        /// <param name="loanPurpose">The reason for taking out the loan. If absent, the lending rate is applicable to all loan purposes.</param>
        /// <param name="tiers">Rate tiers applicable for this rate.</param>
        /// <param name="additionalValue">Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc).</param>
        /// <param name="additionalInfo">Display text providing more information on the rate..</param>
        /// <param name="additionalInfoUri">Link to a web page with more information on this rate.</param>
        public BankingProductLendingRateV2(LendingRateTypeEnum lendingRateType = default(LendingRateTypeEnum), string rate = default(string), string comparisonRate = default(string), string calculationFrequency = default(string), string applicationFrequency = default(string), InterestPaymentDueEnum? interestPaymentDue = default(InterestPaymentDueEnum?), RepaymentTypeEnum? repaymentType = default(RepaymentTypeEnum?), LoanPurposeEnum? loanPurpose = default(LoanPurposeEnum?), List<BankingProductRateTierV3> tiers = default(List<BankingProductRateTierV3>), string additionalValue = default(string), string additionalInfo = default(string), string additionalInfoUri = default(string))
        {
            // to ensure "lendingRateType" is required (not null)
            if (lendingRateType == null)
            {
                throw new InvalidDataException("lendingRateType is a required property for BankingProductLendingRateV2 and cannot be null");
            }
            else
            {
                this.LendingRateType = lendingRateType;
            }
            // to ensure "rate" is required (not null)
            if (rate == null)
            {
                throw new InvalidDataException("rate is a required property for BankingProductLendingRateV2 and cannot be null");
            }
            else
            {
                this.Rate = rate;
            }
            this.ComparisonRate = comparisonRate;
            this.CalculationFrequency = calculationFrequency;
            this.ApplicationFrequency = applicationFrequency;
            this.InterestPaymentDue = interestPaymentDue;
            this.RepaymentType = repaymentType;
            this.LoanPurpose = loanPurpose;
            this.Tiers = tiers;
            this.AdditionalValue = additionalValue;
            this.AdditionalInfo = additionalInfo;
            this.AdditionalInfoUri = additionalInfoUri;
        }
        

        /// <summary>
        /// The rate to be applied
        /// </summary>
        /// <value>The rate to be applied</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public string Rate { get; set; }

        /// <summary>
        /// A comparison rate equivalent for this rate
        /// </summary>
        /// <value>A comparison rate equivalent for this rate</value>
        [DataMember(Name="comparisonRate", EmitDefaultValue=false)]
        public string ComparisonRate { get; set; }

        /// <summary>
        /// The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#x27;applied&#x27; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#x27;applied&#x27; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name="calculationFrequency", EmitDefaultValue=false)]
        public string CalculationFrequency { get; set; }

        /// <summary>
        /// The period after which the calculated amount(s) (see calculationFrequency) are &#x27;applied&#x27; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The period after which the calculated amount(s) (see calculationFrequency) are &#x27;applied&#x27; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name="applicationFrequency", EmitDefaultValue=false)]
        public string ApplicationFrequency { get; set; }




        /// <summary>
        /// Rate tiers applicable for this rate
        /// </summary>
        /// <value>Rate tiers applicable for this rate</value>
        [DataMember(Name="tiers", EmitDefaultValue=false)]
        public List<BankingProductRateTierV3> Tiers { get; set; }

        /// <summary>
        /// Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc)
        /// </summary>
        /// <value>Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc)</value>
        [DataMember(Name="additionalValue", EmitDefaultValue=false)]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information on the rate.
        /// </summary>
        /// <value>Display text providing more information on the rate.</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information on this rate
        /// </summary>
        /// <value>Link to a web page with more information on this rate</value>
        [DataMember(Name="additionalInfoUri", EmitDefaultValue=false)]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductLendingRateV2 {\n");
            sb.Append("  LendingRateType: ").Append(LendingRateType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  ComparisonRate: ").Append(ComparisonRate).Append("\n");
            sb.Append("  CalculationFrequency: ").Append(CalculationFrequency).Append("\n");
            sb.Append("  ApplicationFrequency: ").Append(ApplicationFrequency).Append("\n");
            sb.Append("  InterestPaymentDue: ").Append(InterestPaymentDue).Append("\n");
            sb.Append("  RepaymentType: ").Append(RepaymentType).Append("\n");
            sb.Append("  LoanPurpose: ").Append(LoanPurpose).Append("\n");
            sb.Append("  Tiers: ").Append(Tiers).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductLendingRateV2);
        }

        /// <summary>
        /// Returns true if BankingProductLendingRateV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductLendingRateV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductLendingRateV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LendingRateType == input.LendingRateType ||
                    (this.LendingRateType != null &&
                    this.LendingRateType.Equals(input.LendingRateType))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.ComparisonRate == input.ComparisonRate ||
                    (this.ComparisonRate != null &&
                    this.ComparisonRate.Equals(input.ComparisonRate))
                ) && 
                (
                    this.CalculationFrequency == input.CalculationFrequency ||
                    (this.CalculationFrequency != null &&
                    this.CalculationFrequency.Equals(input.CalculationFrequency))
                ) && 
                (
                    this.ApplicationFrequency == input.ApplicationFrequency ||
                    (this.ApplicationFrequency != null &&
                    this.ApplicationFrequency.Equals(input.ApplicationFrequency))
                ) && 
                (
                    this.InterestPaymentDue == input.InterestPaymentDue ||
                    (this.InterestPaymentDue != null &&
                    this.InterestPaymentDue.Equals(input.InterestPaymentDue))
                ) && 
                (
                    this.RepaymentType == input.RepaymentType ||
                    (this.RepaymentType != null &&
                    this.RepaymentType.Equals(input.RepaymentType))
                ) && 
                (
                    this.LoanPurpose == input.LoanPurpose ||
                    (this.LoanPurpose != null &&
                    this.LoanPurpose.Equals(input.LoanPurpose))
                ) && 
                (
                    this.Tiers == input.Tiers ||
                    this.Tiers != null &&
                    input.Tiers != null &&
                    this.Tiers.SequenceEqual(input.Tiers)
                ) && 
                (
                    this.AdditionalValue == input.AdditionalValue ||
                    (this.AdditionalValue != null &&
                    this.AdditionalValue.Equals(input.AdditionalValue))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.AdditionalInfoUri == input.AdditionalInfoUri ||
                    (this.AdditionalInfoUri != null &&
                    this.AdditionalInfoUri.Equals(input.AdditionalInfoUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LendingRateType != null)
                    hashCode = hashCode * 59 + this.LendingRateType.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.ComparisonRate != null)
                    hashCode = hashCode * 59 + this.ComparisonRate.GetHashCode();
                if (this.CalculationFrequency != null)
                    hashCode = hashCode * 59 + this.CalculationFrequency.GetHashCode();
                if (this.ApplicationFrequency != null)
                    hashCode = hashCode * 59 + this.ApplicationFrequency.GetHashCode();
                if (this.InterestPaymentDue != null)
                    hashCode = hashCode * 59 + this.InterestPaymentDue.GetHashCode();
                if (this.RepaymentType != null)
                    hashCode = hashCode * 59 + this.RepaymentType.GetHashCode();
                if (this.LoanPurpose != null)
                    hashCode = hashCode * 59 + this.LoanPurpose.GetHashCode();
                if (this.Tiers != null)
                    hashCode = hashCode * 59 + this.Tiers.GetHashCode();
                if (this.AdditionalValue != null)
                    hashCode = hashCode * 59 + this.AdditionalValue.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + this.AdditionalInfoUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
