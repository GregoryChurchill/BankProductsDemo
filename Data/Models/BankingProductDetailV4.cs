/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductDetailV4
    /// </summary>
    [DataContract]
        public partial class BankingProductDetailV4 : BankingProductV4,  IEquatable<BankingProductDetailV4>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductDetailV4" /> class.
        /// </summary>
        /// <param name="bundles">An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also.</param>
        /// <param name="features">Array of features available for the product.</param>
        /// <param name="constraints">Constraints on the application for or operation of the product such as minimum balances or limit thresholds.</param>
        /// <param name="eligibility">Eligibility criteria for the product.</param>
        /// <param name="fees">Fees applicable for the product.</param>
        /// <param name="depositRates">Interest rates available for deposits.</param>
        /// <param name="lendingRates">Interest rates charged against lending balances.</param>
        public BankingProductDetailV4(List<BankingProductBundle> bundles = default(List<BankingProductBundle>), List<BankingProductFeatureV2> features = default(List<BankingProductFeatureV2>), List<BankingProductConstraint> constraints = default(List<BankingProductConstraint>), List<BankingProductEligibility> eligibility = default(List<BankingProductEligibility>), List<BankingProductFee> fees = default(List<BankingProductFee>), List<BankingProductDepositRate> depositRates = default(List<BankingProductDepositRate>), List<BankingProductLendingRateV2> lendingRates = default(List<BankingProductLendingRateV2>), string productId = default(string), string effectiveFrom = default(string), string effectiveTo = default(string), string lastUpdated = default(string), BankingProductCategory productCategory = default(BankingProductCategory), string name = default(string), string description = default(string), string brand = default(string), string brandName = default(string), string applicationUri = default(string), bool? isTailored = default(bool?), BankingProductAdditionalInformationV2 additionalInformation = default(BankingProductAdditionalInformationV2), List<BankingProductV4CardArt> cardArt = default(List<BankingProductV4CardArt>)) : base(productId, effectiveFrom, effectiveTo, lastUpdated, productCategory, name, description, brand, brandName, applicationUri, isTailored, additionalInformation, cardArt)
        {
            this.Bundles = bundles;
            this.Features = features;
            this.Constraints = constraints;
            this.Eligibility = eligibility;
            this.Fees = fees;
            this.DepositRates = depositRates;
            this.LendingRates = lendingRates;
        }
        
        /// <summary>
        /// An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also
        /// </summary>
        /// <value>An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also</value>
        [DataMember(Name="bundles", EmitDefaultValue=false)]
        public List<BankingProductBundle> Bundles { get; set; }

        /// <summary>
        /// Array of features available for the product
        /// </summary>
        /// <value>Array of features available for the product</value>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public List<BankingProductFeatureV2> Features { get; set; }

        /// <summary>
        /// Constraints on the application for or operation of the product such as minimum balances or limit thresholds
        /// </summary>
        /// <value>Constraints on the application for or operation of the product such as minimum balances or limit thresholds</value>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public List<BankingProductConstraint> Constraints { get; set; }

        /// <summary>
        /// Eligibility criteria for the product
        /// </summary>
        /// <value>Eligibility criteria for the product</value>
        [DataMember(Name="eligibility", EmitDefaultValue=false)]
        public List<BankingProductEligibility> Eligibility { get; set; }

        /// <summary>
        /// Fees applicable for the product
        /// </summary>
        /// <value>Fees applicable for the product</value>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<BankingProductFee> Fees { get; set; }

        /// <summary>
        /// Interest rates available for deposits
        /// </summary>
        /// <value>Interest rates available for deposits</value>
        [DataMember(Name="depositRates", EmitDefaultValue=false)]
        public List<BankingProductDepositRate> DepositRates { get; set; }

        /// <summary>
        /// Interest rates charged against lending balances
        /// </summary>
        /// <value>Interest rates charged against lending balances</value>
        [DataMember(Name="lendingRates", EmitDefaultValue=false)]
        public List<BankingProductLendingRateV2> LendingRates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductDetailV4 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Bundles: ").Append(Bundles).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  DepositRates: ").Append(DepositRates).Append("\n");
            sb.Append("  LendingRates: ").Append(LendingRates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductDetailV4);
        }

        /// <summary>
        /// Returns true if BankingProductDetailV4 instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductDetailV4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductDetailV4 input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Bundles == input.Bundles ||
                    this.Bundles != null &&
                    input.Bundles != null &&
                    this.Bundles.SequenceEqual(input.Bundles)
                ) && base.Equals(input) && 
                (
                    this.Features == input.Features ||
                    this.Features != null &&
                    input.Features != null &&
                    this.Features.SequenceEqual(input.Features)
                ) && base.Equals(input) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && base.Equals(input) && 
                (
                    this.Eligibility == input.Eligibility ||
                    this.Eligibility != null &&
                    input.Eligibility != null &&
                    this.Eligibility.SequenceEqual(input.Eligibility)
                ) && base.Equals(input) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && base.Equals(input) && 
                (
                    this.DepositRates == input.DepositRates ||
                    this.DepositRates != null &&
                    input.DepositRates != null &&
                    this.DepositRates.SequenceEqual(input.DepositRates)
                ) && base.Equals(input) && 
                (
                    this.LendingRates == input.LendingRates ||
                    this.LendingRates != null &&
                    input.LendingRates != null &&
                    this.LendingRates.SequenceEqual(input.LendingRates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Bundles != null)
                    hashCode = hashCode * 59 + this.Bundles.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.Eligibility != null)
                    hashCode = hashCode * 59 + this.Eligibility.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.DepositRates != null)
                    hashCode = hashCode * 59 + this.DepositRates.GetHashCode();
                if (this.LendingRates != null)
                    hashCode = hashCode * 59 + this.LendingRates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
