/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductDepositRate
    /// </summary>
    [DataContract]
        public partial class BankingProductDepositRate :  IEquatable<BankingProductDepositRate>, IValidatableObject
    {
        /// <summary>
        /// The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DepositRateTypeEnum
        {
            /// <summary>
            /// Enum BONUS for value: BONUS
            /// </summary>
            [EnumMember(Value = "BONUS")]
            BONUS = 1,
            /// <summary>
            /// Enum BUNDLEBONUS for value: BUNDLE_BONUS
            /// </summary>
            [EnumMember(Value = "BUNDLE_BONUS")]
            BUNDLEBONUS = 2,
            /// <summary>
            /// Enum FIXED for value: FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED = 3,
            /// <summary>
            /// Enum FLOATING for value: FLOATING
            /// </summary>
            [EnumMember(Value = "FLOATING")]
            FLOATING = 4,
            /// <summary>
            /// Enum INTRODUCTORY for value: INTRODUCTORY
            /// </summary>
            [EnumMember(Value = "INTRODUCTORY")]
            INTRODUCTORY = 5,
            /// <summary>
            /// Enum MARKETLINKED for value: MARKET_LINKED
            /// </summary>
            [EnumMember(Value = "MARKET_LINKED")]
            MARKETLINKED = 6,
            /// <summary>
            /// Enum VARIABLE for value: VARIABLE
            /// </summary>
            [EnumMember(Value = "VARIABLE")]
            VARIABLE = 7        }
        /// <summary>
        /// The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning</value>
        [DataMember(Name="depositRateType", EmitDefaultValue=false)]
        public DepositRateTypeEnum DepositRateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductDepositRate" /> class.
        /// </summary>
        /// <param name="depositRateType">The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning (required).</param>
        /// <param name="rate">The rate to be applied (required).</param>
        /// <param name="calculationFrequency">The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#x27;applied&#x27; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax).</param>
        /// <param name="applicationFrequency">The period after which the calculated amount(s) (see calculationFrequency) are &#x27;applied&#x27; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax).</param>
        /// <param name="tiers">Rate tiers applicable for this rate.</param>
        /// <param name="additionalValue">Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc).</param>
        /// <param name="additionalInfo">Display text providing more information on the rate.</param>
        /// <param name="additionalInfoUri">Link to a web page with more information on this rate.</param>
        public BankingProductDepositRate(DepositRateTypeEnum depositRateType = default(DepositRateTypeEnum), string rate = default(string), string calculationFrequency = default(string), string applicationFrequency = default(string), List<BankingProductRateTierV3> tiers = default(List<BankingProductRateTierV3>), string additionalValue = default(string), string additionalInfo = default(string), string additionalInfoUri = default(string))
        {
            // to ensure "depositRateType" is required (not null)
            if (depositRateType == null)
            {
                throw new InvalidDataException("depositRateType is a required property for BankingProductDepositRate and cannot be null");
            }
            else
            {
                this.DepositRateType = depositRateType;
            }
            // to ensure "rate" is required (not null)
            if (rate == null)
            {
                throw new InvalidDataException("rate is a required property for BankingProductDepositRate and cannot be null");
            }
            else
            {
                this.Rate = rate;
            }
            this.CalculationFrequency = calculationFrequency;
            this.ApplicationFrequency = applicationFrequency;
            this.Tiers = tiers;
            this.AdditionalValue = additionalValue;
            this.AdditionalInfo = additionalInfo;
            this.AdditionalInfoUri = additionalInfoUri;
        }
        

        /// <summary>
        /// The rate to be applied
        /// </summary>
        /// <value>The rate to be applied</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public string Rate { get; set; }

        /// <summary>
        /// The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#x27;applied&#x27; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#x27;applied&#x27; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name="calculationFrequency", EmitDefaultValue=false)]
        public string CalculationFrequency { get; set; }

        /// <summary>
        /// The period after which the calculated amount(s) (see calculationFrequency) are &#x27;applied&#x27; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The period after which the calculated amount(s) (see calculationFrequency) are &#x27;applied&#x27; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name="applicationFrequency", EmitDefaultValue=false)]
        public string ApplicationFrequency { get; set; }

        /// <summary>
        /// Rate tiers applicable for this rate
        /// </summary>
        /// <value>Rate tiers applicable for this rate</value>
        [DataMember(Name="tiers", EmitDefaultValue=false)]
        public List<BankingProductRateTierV3> Tiers { get; set; }

        /// <summary>
        /// Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc)
        /// </summary>
        /// <value>Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc)</value>
        [DataMember(Name="additionalValue", EmitDefaultValue=false)]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information on the rate
        /// </summary>
        /// <value>Display text providing more information on the rate</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information on this rate
        /// </summary>
        /// <value>Link to a web page with more information on this rate</value>
        [DataMember(Name="additionalInfoUri", EmitDefaultValue=false)]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductDepositRate {\n");
            sb.Append("  DepositRateType: ").Append(DepositRateType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  CalculationFrequency: ").Append(CalculationFrequency).Append("\n");
            sb.Append("  ApplicationFrequency: ").Append(ApplicationFrequency).Append("\n");
            sb.Append("  Tiers: ").Append(Tiers).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductDepositRate);
        }

        /// <summary>
        /// Returns true if BankingProductDepositRate instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductDepositRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductDepositRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DepositRateType == input.DepositRateType ||
                    (this.DepositRateType != null &&
                    this.DepositRateType.Equals(input.DepositRateType))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.CalculationFrequency == input.CalculationFrequency ||
                    (this.CalculationFrequency != null &&
                    this.CalculationFrequency.Equals(input.CalculationFrequency))
                ) && 
                (
                    this.ApplicationFrequency == input.ApplicationFrequency ||
                    (this.ApplicationFrequency != null &&
                    this.ApplicationFrequency.Equals(input.ApplicationFrequency))
                ) && 
                (
                    this.Tiers == input.Tiers ||
                    this.Tiers != null &&
                    input.Tiers != null &&
                    this.Tiers.SequenceEqual(input.Tiers)
                ) && 
                (
                    this.AdditionalValue == input.AdditionalValue ||
                    (this.AdditionalValue != null &&
                    this.AdditionalValue.Equals(input.AdditionalValue))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.AdditionalInfoUri == input.AdditionalInfoUri ||
                    (this.AdditionalInfoUri != null &&
                    this.AdditionalInfoUri.Equals(input.AdditionalInfoUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DepositRateType != null)
                    hashCode = hashCode * 59 + this.DepositRateType.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.CalculationFrequency != null)
                    hashCode = hashCode * 59 + this.CalculationFrequency.GetHashCode();
                if (this.ApplicationFrequency != null)
                    hashCode = hashCode * 59 + this.ApplicationFrequency.GetHashCode();
                if (this.Tiers != null)
                    hashCode = hashCode * 59 + this.Tiers.GetHashCode();
                if (this.AdditionalValue != null)
                    hashCode = hashCode * 59 + this.AdditionalValue.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + this.AdditionalInfoUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
