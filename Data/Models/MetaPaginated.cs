/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankingProductsData.Models
{
    /// <summary>
    /// MetaPaginated
    /// </summary>
    [DataContract]
        public partial class MetaPaginated :  IEquatable<MetaPaginated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaPaginated" /> class.
        /// </summary>
        /// <param name="totalRecords">The total number of records in the full set. See [pagination](#pagination). (required).</param>
        /// <param name="totalPages">The total number of pages in the full set. See [pagination](#pagination). (required).</param>
        public MetaPaginated(int? totalRecords = default(int?), int? totalPages = default(int?))
        {
            // to ensure "totalRecords" is required (not null)
            if (totalRecords == null)
            {
                throw new InvalidDataException("totalRecords is a required property for MetaPaginated and cannot be null");
            }
            else
            {
                this.TotalRecords = totalRecords;
            }
            // to ensure "totalPages" is required (not null)
            if (totalPages == null)
            {
                throw new InvalidDataException("totalPages is a required property for MetaPaginated and cannot be null");
            }
            else
            {
                this.TotalPages = totalPages;
            }
        }
        
        /// <summary>
        /// The total number of records in the full set. See [pagination](#pagination).
        /// </summary>
        /// <value>The total number of records in the full set. See [pagination](#pagination).</value>
        [DataMember(Name="totalRecords", EmitDefaultValue=false)]
        public int? TotalRecords { get; set; }

        /// <summary>
        /// The total number of pages in the full set. See [pagination](#pagination).
        /// </summary>
        /// <value>The total number of pages in the full set. See [pagination](#pagination).</value>
        [DataMember(Name="totalPages", EmitDefaultValue=false)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaPaginated {\n");
            sb.Append("  TotalRecords: ").Append(TotalRecords).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaPaginated);
        }

        /// <summary>
        /// Returns true if MetaPaginated instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaPaginated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaPaginated input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalRecords == input.TotalRecords ||
                    (this.TotalRecords != null &&
                    this.TotalRecords.Equals(input.TotalRecords))
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    (this.TotalPages != null &&
                    this.TotalPages.Equals(input.TotalPages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalRecords != null)
                    hashCode = hashCode * 59 + this.TotalRecords.GetHashCode();
                if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
