/*
 * CDR Banking API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1.27.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BankingProductsData.Models
{
    /// <summary>
    /// BankingProductDiscountEligibility
    /// </summary>
    [DataContract]
        public partial class BankingProductDiscountEligibility :  IEquatable<BankingProductDiscountEligibility>, IValidatableObject
    {
        /// <summary>
        /// The type of the specific eligibility constraint for a discount
        /// </summary>
        /// <value>The type of the specific eligibility constraint for a discount</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DiscountEligibilityTypeEnum
        {
            /// <summary>
            /// Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESS = 1,
            /// <summary>
            /// Enum EMPLOYMENTSTATUS for value: EMPLOYMENT_STATUS
            /// </summary>
            [EnumMember(Value = "EMPLOYMENT_STATUS")]
            EMPLOYMENTSTATUS = 2,
            /// <summary>
            /// Enum INTRODUCTORY for value: INTRODUCTORY
            /// </summary>
            [EnumMember(Value = "INTRODUCTORY")]
            INTRODUCTORY = 3,
            /// <summary>
            /// Enum MAXAGE for value: MAX_AGE
            /// </summary>
            [EnumMember(Value = "MAX_AGE")]
            MAXAGE = 4,
            /// <summary>
            /// Enum MINAGE for value: MIN_AGE
            /// </summary>
            [EnumMember(Value = "MIN_AGE")]
            MINAGE = 5,
            /// <summary>
            /// Enum MININCOME for value: MIN_INCOME
            /// </summary>
            [EnumMember(Value = "MIN_INCOME")]
            MININCOME = 6,
            /// <summary>
            /// Enum MINTURNOVER for value: MIN_TURNOVER
            /// </summary>
            [EnumMember(Value = "MIN_TURNOVER")]
            MINTURNOVER = 7,
            /// <summary>
            /// Enum NATURALPERSON for value: NATURAL_PERSON
            /// </summary>
            [EnumMember(Value = "NATURAL_PERSON")]
            NATURALPERSON = 8,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 9,
            /// <summary>
            /// Enum PENSIONRECIPIENT for value: PENSION_RECIPIENT
            /// </summary>
            [EnumMember(Value = "PENSION_RECIPIENT")]
            PENSIONRECIPIENT = 10,
            /// <summary>
            /// Enum RESIDENCYSTATUS for value: RESIDENCY_STATUS
            /// </summary>
            [EnumMember(Value = "RESIDENCY_STATUS")]
            RESIDENCYSTATUS = 11,
            /// <summary>
            /// Enum STAFF for value: STAFF
            /// </summary>
            [EnumMember(Value = "STAFF")]
            STAFF = 12,
            /// <summary>
            /// Enum STUDENT for value: STUDENT
            /// </summary>
            [EnumMember(Value = "STUDENT")]
            STUDENT = 13        }
        /// <summary>
        /// The type of the specific eligibility constraint for a discount
        /// </summary>
        /// <value>The type of the specific eligibility constraint for a discount</value>
        [DataMember(Name="discountEligibilityType", EmitDefaultValue=false)]
        public DiscountEligibilityTypeEnum DiscountEligibilityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankingProductDiscountEligibility" /> class.
        /// </summary>
        /// <param name="discountEligibilityType">The type of the specific eligibility constraint for a discount (required).</param>
        /// <param name="additionalValue">Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc).</param>
        /// <param name="additionalInfo">Display text providing more information on this eligibility constraint. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc).</param>
        /// <param name="additionalInfoUri">Link to a web page with more information on this eligibility constraint.</param>
        public BankingProductDiscountEligibility(DiscountEligibilityTypeEnum discountEligibilityType = default(DiscountEligibilityTypeEnum), string additionalValue = default(string), string additionalInfo = default(string), string additionalInfoUri = default(string))
        {
            // to ensure "discountEligibilityType" is required (not null)
            if (discountEligibilityType == null)
            {
                throw new InvalidDataException("discountEligibilityType is a required property for BankingProductDiscountEligibility and cannot be null");
            }
            else
            {
                this.DiscountEligibilityType = discountEligibilityType;
            }
            this.AdditionalValue = additionalValue;
            this.AdditionalInfo = additionalInfo;
            this.AdditionalInfoUri = additionalInfoUri;
        }
        

        /// <summary>
        /// Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)
        /// </summary>
        /// <value>Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)</value>
        [DataMember(Name="additionalValue", EmitDefaultValue=false)]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information on this eligibility constraint. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)
        /// </summary>
        /// <value>Display text providing more information on this eligibility constraint. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information on this eligibility constraint
        /// </summary>
        /// <value>Link to a web page with more information on this eligibility constraint</value>
        [DataMember(Name="additionalInfoUri", EmitDefaultValue=false)]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductDiscountEligibility {\n");
            sb.Append("  DiscountEligibilityType: ").Append(DiscountEligibilityType).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankingProductDiscountEligibility);
        }

        /// <summary>
        /// Returns true if BankingProductDiscountEligibility instances are equal
        /// </summary>
        /// <param name="input">Instance of BankingProductDiscountEligibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductDiscountEligibility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiscountEligibilityType == input.DiscountEligibilityType ||
                    (this.DiscountEligibilityType != null &&
                    this.DiscountEligibilityType.Equals(input.DiscountEligibilityType))
                ) && 
                (
                    this.AdditionalValue == input.AdditionalValue ||
                    (this.AdditionalValue != null &&
                    this.AdditionalValue.Equals(input.AdditionalValue))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.AdditionalInfoUri == input.AdditionalInfoUri ||
                    (this.AdditionalInfoUri != null &&
                    this.AdditionalInfoUri.Equals(input.AdditionalInfoUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscountEligibilityType != null)
                    hashCode = hashCode * 59 + this.DiscountEligibilityType.GetHashCode();
                if (this.AdditionalValue != null)
                    hashCode = hashCode * 59 + this.AdditionalValue.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + this.AdditionalInfoUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
